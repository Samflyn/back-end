polymorphism
string pool, why we need it
null pointer exception handling for an object
array vs arraylist
completablefuture, why we need it
what is functional interface, and relation between lambda expression
how rest controller handles requests
spring profiles
how spring security works
circuit breaker design pattern
object class and it's methods
what's the significance of equals and hashCode
what is immutable class and how to create it
what is try with resources
difference between map and flatMap
difference between @Controller vs @RestController
garbage collection concepts, list of garbage collection
cognative complexities
solid
cap
which database and why you would choose it
resttemplate vs webclient
workflow engine
observer pattern in spring
spring aware interfaces for beans
concurrentskiplist, linkedhashmap,
pair, triple, doublylinkedlist, circularlinkedlist

SOLID:
    -> Single responsibility principle
    -> Open for Extension, Closed for Modification
    -> Liskov Substitution -> if class A is a subtype of class B, we should be able to replace B with A
    -> Interface Segregation
    -> Dependency Inversion

oops: 
    -> Encapsulation: Binding all fields as single entries
    -> Inheritance: Reuse all properties in child
    -> polymorphism: compile time -> overloading, runtime -> overriding
    -> Abstraction: Hiding implimentation to end user

maintaining history programatically:
    -> triggers in db 
    -> java code
    -> async using kafka and audit service
    -> temporal tables

microservice design patterns:
    -> API gateway, reverse proxy
    -> Database per service
    -> circuit breaker
    -> event-driven
    -> saga pattern

design patterns:
    Creational:
        -> factory
        -> singleton
        -> builder

    Structural:
        -> facade -> class which will help in routing the class calls
        -> adaptor -> if classes have same features, but different interfaces,
                        we can use an adapter to use the class with other class without modifying their source code
        -> decorator -> add additional responsibilities dynamically to an object

    Behavioural:
        -> strategy -> Define a family of algorithms, encapsulate each one, and make them interchangeable.
                    Strategy lets the algorithm vary independently from clients that use it.
        -> observer -> Defines a one-to-many dependency between objects so that when one object changes state,
                    all its dependents are notified and updated automatically.

    JEE:
        -> mvc

Richardson's maturity model for rest services



mockito, junit
spring global exception handler
spring validation framework
microservice design patterns
functional and optional
java streams
sql

design patterns
solid

select distinct department.department_name, salary, employee.name from employee
join department
on employee.dept_id::int = department.id
where (dept_id, salary) in (select dept_id, MAX(salary) from employee group by dept_id);

